<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人博客</title>
  
  <subtitle>记录自己的学习生活，共勉</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-28T02:52:47.929Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zhang YanMing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>循环问题</title>
    <link href="http://yoursite.com/2018/12/20/%E5%BE%AA%E7%8E%AF%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/12/20/循环问题/</id>
    <published>2018-12-20T10:41:50.000Z</published>
    <updated>2018-12-28T02:52:47.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="有关循环的一些语法"><a href="#有关循环的一些语法" class="headerlink" title="有关循环的一些语法"></a>有关循环的一些语法</h1><hr><h2 id="1-foreach与map的异同点"><a href="#1-foreach与map的异同点" class="headerlink" title="1.foreach与map的异同点"></a>1.foreach与map的异同点</h2><p>  <strong>(1) map定义和用法：：</strong><br>  map方法返回一个新的数组，数组中的元素为原始数组调用函数处理后的值。<br>  我的理解就是：原数组进行处理之后对应的一个新的数组。<br>  map()方法按照原始数组元素顺序依次处理元素。<br>  注意：map()方法不会对空数组进行检测。<br>  map()方法不会改变原始数组。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.map(function(item,index,arr)&#123;&#125;,thisValue)</span><br></pre></td></tr></table></figure></p><p><strong> (2)foreach定义和用法 ：</strong><br>  forEach()方法用于调用数组的每个元素，将元素传给回调函数。<br>  注意：forEach对于空数组是不会调用回调函数的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array.forEach(function(item,index,arr)&#123;&#125;,this)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      有关循环的一些语法。
    
    </summary>
    
    
      <category term="js es6" scheme="http://yoursite.com/tags/js-es6/"/>
    
  </entry>
  
  <entry>
    <title>git命令学习</title>
    <link href="http://yoursite.com/2018/12/15/git%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/12/15/git学习/</id>
    <published>2018-12-15T06:41:33.000Z</published>
    <updated>2019-01-15T09:29:07.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git学习"><a href="#git学习" class="headerlink" title="git学习"></a>git学习</h1><hr><h2 id="1-git错误归纳"><a href="#1-git错误归纳" class="headerlink" title="1. git错误归纳"></a>1. git错误归纳</h2><h3 id="1-1-运行-git-remote-add-origin-git-github-com-yourName-yourRepo-git命令时提示下面的错误："><a href="#1-1-运行-git-remote-add-origin-git-github-com-yourName-yourRepo-git命令时提示下面的错误：" class="headerlink" title="1.1  运行 $ git remote add origin git@github.com:yourName/yourRepo.git命令时提示下面的错误："></a>1.1  运行 $ git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:yourName/yourRepo.git命令时提示下面的错误：</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fatal: Not a git repository (or any of the parent directories): .git</span><br><span class="line">  提示说没有.git这样一个目录。</span><br><span class="line">  解决办法如下：运行git init</span><br><span class="line">  然后在运行git remote add origin git@github.com:yourName/yourRepo.git</span><br></pre></td></tr></table></figure><h3 id="1-2-git-push报错error-failed-to-push-some-refs-to-39-git-github-com："><a href="#1-2-git-push报错error-failed-to-push-some-refs-to-39-git-github-com：" class="headerlink" title="1.2  git push报错error: failed to push some refs to &#39;git@github.com："></a>1.2  git push报错error: failed to push some refs to <a href="mailto:&#39;git@github.com" target="_blank" rel="noopener">&#39;git@github.com</a>：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">原因： </span><br><span class="line">GitHub远程仓库中的README.md文件不在本地仓库中。 </span><br><span class="line">解决方案：</span><br><span class="line">$ git pull --rebase origin master</span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><h2 id="2-git命令"><a href="#2-git命令" class="headerlink" title="2.git命令"></a>2.git命令</h2><h3 id="2-1-git删除某次指定的提交"><a href="#2-1-git删除某次指定的提交" class="headerlink" title="2.1 git删除某次指定的提交:"></a>2.1 git删除某次指定的提交:</h3><p>reset命令有3种方式：<br>(1)git reset –mixed：此为默认方式，不带任何参数的git reset，即时这种方式，它回退到某个版本，只保留源码，回退commit和index信息<br>(2)git reset –soft：回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可<br>(3)git reset –hard：彻底回退到某个版本，本地的源码也会变为上一个版本的内容</p><h3 id="2-2-git-fetch和git-pull的差别"><a href="#2-2-git-fetch和git-pull的差别" class="headerlink" title="2.2 git fetch和git pull的差别"></a>2.2 git fetch和git pull的差别</h3><p>  (1)git fetch 相当于是从远程获取最新到本地，不会自动merge<br>  (2)git pull：相当于是从远程获取最新版本并merge到本地,在实际使用中，git fetch更安全一些。</p><h3 id="2-3-rebase-和-merge的区别"><a href="#2-3-rebase-和-merge的区别" class="headerlink" title="2.3 rebase 和 merge的区别"></a>2.3 rebase 和 merge的区别</h3><p>  (1)git merge origin就是将你现在的local branch 和远程跟踪库remote tracked repo合并, 并形成一个的commit(也就是一个true merge)。<br>  (2)git rebase origin master rebase就是可以把分支的祖先强行改变,可以把master分支自上次拉取或上次提交后做的提交, 全部拿出来在origin上重新跑(run)一遍, 你的master分支的历史就没了, 而且注意一点, git中每个提交(commit)有一个独一无二的hash码, rebase命令会为每个新增(相对origin来说)的提交重新生成一个hash码.<br>可以看出merge结果能够体现出时间线，但是rebase会打乱时间线。</p>]]></content>
    
    <summary type="html">
    
      这段时间在运用git时遇到一些问题报错，把问题及解决方案整理出来，当做笔记和分享。
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>vue学习</title>
    <link href="http://yoursite.com/2018/12/06/vue%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/12/06/vue学习/</id>
    <published>2018-12-06T06:41:33.000Z</published>
    <updated>2018-12-28T01:38:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue学习总结"><a href="#vue学习总结" class="headerlink" title="vue学习总结"></a>vue学习总结</h1><hr><p><strong>1. Vue模板：</strong><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;vue代码&lt;/template&gt;</span><br><span class="line">&lt;script&gt;JS代码&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;css样式&lt;/style&gt;   scoped:定义样式只在当前组件内生效</span><br></pre></td></tr></table></figure></p><p>  <strong>生命周期钩子函数：</strong> created 钩子可以用来在一个实例被创建之后执行代码：其他函数如 mounted、updated 和 destroyed。</p><p><strong>2. 模板语法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">（1）Mustache语法</span><br><span class="line"> 双大括号&#123;&#123;&#125;&#125;进行数据绑定，注意大括号里面只能为单行语句,不能作用在html属性上</span><br><span class="line"></span><br><span class="line">（2）v-html和v-text</span><br><span class="line"> &lt;p v-html=&quot;hello&quot;&gt;&lt;/p&gt;这个可以解析html语法而v-text会直接显示文本，</span><br><span class="line"> &lt;p v-text=&quot;hello&quot;&gt;&lt;/p&gt;</span><br><span class="line"> 在&lt;script&gt;部分的data()函数中声明：hello:&quot;&lt;p&gt;hello vue&lt;/p&gt;&quot;</span><br><span class="line"> </span><br><span class="line">（3）v-bind 动态绑定，在下面函数声明属性，样式动态改变。</span><br><span class="line"> 缩写形式：&lt;a :href=&quot;url&quot;&gt;...&lt;/a&gt;</span><br><span class="line"> &lt;span v-bind:class=&quot;ha&quot; v-bind:id=&quot;bi&quot;&gt;哈哈哈哈&lt;/span&gt;</span><br><span class="line"> data()函数部分：</span><br><span class="line"> ha:&quot;ha1&quot;,</span><br><span class="line"> bi:&quot;bt&quot;,</span><br><span class="line"> style样式部分:</span><br><span class="line"> .ha1&#123;color:blue;&#125;</span><br><span class="line"> #bi&#123;font-size:50px;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>3. 条件渲染：</strong><br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">（1）v-if 和v-else。当v-if属性为ture时才显示，否则显示v-else,则属性为false,</span><br><span class="line"> v-else 元素必须紧跟在带 v-if 或者 v-else-if 的元素的后面，否则它将不会被识别。</span><br><span class="line"> &lt;h1 v-if=&quot;ok&quot;&gt;Yes&lt;/h1&gt;</span><br><span class="line"> &lt;h1 v-else&gt;No&lt;/h1&gt;</span><br><span class="line">（2）v-show</span><br><span class="line"> v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</span><br><span class="line"> v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</span><br></pre></td></tr></table></figure></p><p><strong>4.列表渲染</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">（1）v-for</span><br><span class="line">v-for 指令根据一组数组的选项列表进行渲染。v-for 指令需要使用 item in items 形式的特殊语法，items 是源数据数组并且 item 是数组元素迭代的别名。</span><br><span class="line">v-for 还支持一个可选的第二个参数为当前项的索引。</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;(urse,index) in urses&quot;&gt;&#123;&#123;urse&#125;&#125;-&#123;&#123;index&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">data()函数部分:</span><br><span class="line">urses:[&quot;aaa&quot;,&quot;bbb&quot;,&quot;ccc&quot;],</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      前段时间学习了vue,今天在这里总结一下，这次只是几个基础部分，还有后续。
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
</feed>
